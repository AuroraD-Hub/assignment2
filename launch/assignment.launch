<?xml version="1.0"?>
<launch>
	
	  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="assignment_world" />
  <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>
   
   <!-- load robot model and spawn it in the environment -->
   <arg name="model" default="$(find assignment2)/urdf/robot_model.xacro" />
   <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />
   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model robot_model -param robot_description -x -6.0 -y 11.0"/>
   
   <!-- actuate transmission on Gazebo -->
   <rosparam file="$(find assignment2)/config/motor_model.yaml" command="load" ns="/robot" />
   <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--namespace=/robot
     joint_state_controller
     joint1_position_controller 
     joint2_position_controller
     joint3_position_controller
     joint4_position_controller
     --shutdown-timeout 4">
   </node>
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
     <remap from="joint_states" to="robot/joint_states"/>
   </node>
   
   <!-- Include external packages for SLAM and autonomous navigation -->
   <arg name="base_frame" default="base_link" />
   <arg name="scan_topic" default="/robot/laser/scan" />
   <remap from="/scan" to="/robot/laser/scan" />
   <include file="$(find planning)/launch/gmapping.launch" />
   <param name="slam_gmapping/base_frame" value="$(arg base_frame)"/>
   <include file="$(find planning)/launch/move_base.launch" />
   <rosparam file="$(find planning)/param/global_costmap_params.yaml"/>
   <rosparam param="global_costmap/robot_base_frame" subst_value="True" >$(arg base_frame)</rosparam>
   <rosparam file="$(find planning)/param/local_costmap_params.yaml"/>
   <rosparam param="local_costmap/robot_base_frame" subst_value="True" >$(arg base_frame)</rosparam>
   <rosparam file="$(find planning)/param/costmap_common_params.yaml"/>
   <rosparam param="/scan/topic" subst_value="True" >$(arg scan_topic)</rosparam>
   <rosparam param="/move_base/global_costmap/scan/topic" subst_value="True" >$(arg scan_topic)</rosparam>
   <rosparam param="/move_base/local_costmap/scan/topic" subst_value="True" >$(arg scan_topic)</rosparam>
   <rosparam param="/move_base/global_costmap/robot_base_frame" subst_value="True" >$(arg base_frame)</rosparam>
   <rosparam param="/move_base/local_costmap/robot_base_frame" subst_value="True" >$(arg base_frame)</rosparam>
   <rosparam param="/move_base/global_costmap/robot_radius" subst_value="True" >0.15</rosparam>
   <rosparam param="/move_base/local_costmap/robot_radius" subst_value="True" >0.15</rosparam>
   
   <!-- Start the simulation -->
   <node pkg="armor" type="execute" name="armor_service" args="it.emarolab.armor.ARMORMainService"/>
   <node pkg="smach_viewer" type="smach_viewer.py" name="smach_viewer" output="screen"/>
   <node name="param_name_mapper" pkg="assignment2" type="param_name_mapper.py" />
   <node name="robot_state" pkg="assignment2" type="robot_state.py" launch-prefix = "xterm -e"/>
   <node name="state_machine" pkg="assignment2" type="state_machine.py" launch-prefix = "xterm -e"/>
   <node name="planner" pkg="assignment2" type="planner.py" launch-prefix = "xterm -e"/>
   <node name="marker_server" pkg="assignment2" type="marker_server" />
   <node name="build_map" pkg="assignment2" type="build_map.py" launch-prefix = "xterm -e"/>
   <node name="controller" pkg="assignment2" type="controller.py" launch-prefix = "xterm -e"/>
   <node pkg="aruco_ros" type="marker_publisher" name="aruco_marker_publisher" >
     <remap from="/image" to="/robot/camera/image_raw" />
   </node>

</launch>
